@model IEnumerable<EmployeeAttendanceTracker.BLL.DTOs.CreateAttendanceDto>

@{
    ViewData["Title"] = "Attendance Management";
    var pageSize = 5; // Items per page
    var totalItems = Model.Count();
    var totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    var currentPage = Context.Request.Query["page"].ToString();
    if (string.IsNullOrEmpty(currentPage)) currentPage = "1";
    var currentPageNum = int.Parse(currentPage);
    var skip = (currentPageNum - 1) * pageSize;
    var attendances = Model.Skip(skip).Take(pageSize);
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8">
            <h4>Attendance Records</h4>
            <p>
                <a asp-action="Create" class="btn btn-primary">Create New Attendance</a>
            </p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <!-- Filter Section -->
            <div class="card mb-3">
                <div class="card-header">
                    <h5>Filter Attendance</h5>
                </div>
                <div class="card-body">
                    <form id="filterForm" method="get">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="departmentFilter">Department:</label>
                                <select id="departmentFilter" name="deptId" class="form-control">
                                    <option value="">All Departments</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="employeeFilter">Employee:</label>
                                <select id="employeeFilter" name="empId" class="form-control">
                                    <option value="">All Employees</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="fromDate">From Date:</label>
                                <input type="date" id="fromDate" name="from" class="form-control" />
                            </div>
                            <div class="col-md-3">
                                <label for="toDate">To Date:</label>
                                <input type="date" id="toDate" name="to" class="form-control" />
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-md-12">
                                <button type="button" id="clearFilter" class="btn btn-outline-secondary">Clear Filter</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <table class="table" id="attendanceTable">
                <thead>
                    <tr>
                        <th>Employee Code</th>
                        <th>Employee Name</th>
                        <th>Department</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in attendances) {
                        <tr data-attendance-id="@item.AttendanceId">
                            <td>@Html.DisplayFor(modelItem => item.EmployeeCode)</td>
                            <td>@Html.DisplayFor(modelItem => item.EmployeeName)</td>
                            <td>@Html.DisplayFor(modelItem => item.DepartmentName)</td>
                            <td>@Html.DisplayFor(modelItem => item.Date)</td>
                            <td>
                                <select class="form-control status-dropdown" data-attendance-id="@item.AttendanceId">
                                    @if (item.Status.ToString() == "Present")
                                    {
                                        <option value="Present" selected>Present</option>
                                        <option value="Absent">Absent</option>
                                    }
                                    else
                                    {
                                        <option value="Present">Present</option>
                                        <option value="Absent" selected>Absent</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <a asp-action="Edit" asp-route-id="@item.AttendanceId"    class="btn btn-sm btn-warning" >Edit </a>
                                <a asp-action="Details" asp-route-id="@item.AttendanceId" class="btn btn-sm btn-info"    >Details</a>
                                <a asp-action="Delete" asp-route-id="@item.AttendanceId"  class="btn btn-sm btn-danger"  >Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <nav aria-label="Attendance pagination">
                    <ul class="pagination justify-content-center">
                        @if (currentPageNum > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?page=@(currentPageNum - 1)&deptId=@Context.Request.Query["deptId"]&empId=@Context.Request.Query["empId"]&from=@Context.Request.Query["from"]&to=@Context.Request.Query["to"]">Previous</a>
                            </li>
                        }
                        
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPageNum ? "active" : "")">
                                <a class="page-link" href="?page=@i&deptId=@Context.Request.Query["deptId"]&empId=@Context.Request.Query["empId"]&from=@Context.Request.Query["from"]&to=@Context.Request.Query["to"]">@i</a>
                            </li>
                        }
                        
                        @if (currentPageNum < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?page=@(currentPageNum + 1)&deptId=@Context.Request.Query["deptId"]&empId=@Context.Request.Query["empId"]&from=@Context.Request.Query["from"]&to=@Context.Request.Query["to"]">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
                
                <div class="text-center">
                    <small class="text-muted">
                        Showing @(skip + 1) to @(Math.Min(skip + pageSize, totalItems)) of @totalItems attendance records
                    </small>
                </div>
            }
        </div>
    </div>

    <!-- Quick Attendance Entry Section (moved to bottom) -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Quick Attendance Entry</h5>
                </div>
                <div class="card-body">
                    <form id="quickAttendanceForm">
                        @Html.AntiForgeryToken()
                        <div class="form-row align-items-center mb-3" style="gap: 1rem;">
                            <div class="col-auto">
                                <label for="quickEmployee" class="sr-only">Employee</label>
                                <select id="quickEmployee" class="form-control" required>
                                    <option value="">Select Employee</option>
                                </select>
                            </div>
                            <div class="col-auto">
                                <label for="attendanceDate" class="sr-only">Date</label>
                                <div class="input-group">
                                    <input type="text" id="attendanceDate" class="form-control calendar-rect" readonly required />
                                    <div class="input-group-append">
                                        <button type="button" id="calendarBtn" class="btn btn-outline-secondary">📅</button>
                                    </div>
                                </div>
                                <small class="form-text text-muted">Cannot mark attendance for future dates</small>
                            </div>
                            <div class="col-auto">
                                <div id="currentStatus" class="alert alert-info mb-0 py-2 px-3" style="min-width: 180px;">
                                    Please select both employee and date
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Widget (moved outside the form for better positioning) -->
    <div id="calendarWidget" class="calendar-widget" style="display: none; position: absolute; z-index: 1000;">
        <div class="calendar-header">
            <button type="button" id="prevMonth">&lt;</button>
            <span id="currentMonth"></span>
            <button type="button" id="nextMonth">&gt;</button>
        </div>
        <div id="calendarBody" class="calendar-body"></div>
    </div>
</div>

<style>
    .calendar-widget {
        min-width: 280px;
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .calendar-header button {
        background: none;
        border: none;
        font-size: 18px;
        color: #666;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }
    
    .calendar-header button:hover {
        background-color: #f8f9fa;
        color: #333;
    }
    
    #currentMonth {
        font-weight: 600;
        font-size: 16px;
        color: #333;
    }
    
    .calendar-body {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
    }
    
    .calendar-day {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        font-size: 14px;
        border-radius: 6px;
        text-align: center;
        transition: all 0.2s ease;
        background: transparent;
        color: #333;
    }
    
    .calendar-day:hover:not(.disabled):not(.calendar-day-header) {
        background-color: #e3f2fd;
        color: #1976d2;
    }
    
    .calendar-day.selected {
        background-color: #1976d2;
        color: white;
        font-weight: 600;
    }
    
    .calendar-day.disabled {
        background-color: transparent;
        color: #ccc;
        cursor: not-allowed;
    }
    
    .calendar-day.other-month {
        color: #bbb;
    }
    
    .calendar-day-header {
        font-weight: 600;
        background-color: transparent;
        border: none;
        cursor: default;
        color: #666;
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .calendar-day-header:hover {
        background-color: transparent;
    }
    
    .calendar-day.today {
        background-color: #fff3e0;
        color: #f57c00;
        font-weight: 600;
    }
    
    .calendar-day.today:hover {
        background-color: #ffe0b2;
    }
    .calendar-rect {
        min-width: 160px;
        height: 38px;
        border-radius: 6px;
    }
    #calendarWidget {
        min-width: 320px !important;
        max-width: 400px;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Load dropdowns when page loads
            loadDepartments();
            loadEmployees();
            
            // Initialize calendar
            initializeCalendar();
            
            // Quick attendance form events
            $('#quickEmployee, #attendanceDate').change(function() {
                checkCurrentStatus();
            });
            
            // Clear filter
            $('#clearFilter').click(function() {
                $('#filterForm')[0].reset();
                $('#filterForm').submit();
            });
            
            // Live filtering
            $('#departmentFilter, #employeeFilter, #fromDate, #toDate').change(function() {
                applyLiveFilter();
            });

            // Inline status editing
            $('#attendanceTable').on('change', '.status-dropdown', function() {
                var attendanceId = $(this).data('attendance-id');
                var newStatus = $(this).val();

                $.ajax({
                    url: '/Attendances/UpdateStatusAjax',
                    type: 'POST',
                    data: {
                        attendanceId: attendanceId,
                        status: newStatus
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        if (result.success) {
                            // Update the status display immediately
                            var statusBox = $('#currentStatus');
                            statusBox.removeClass('alert-info alert-success alert-danger alert-warning');
                            if (newStatus === "Present") {
                                statusBox.addClass('alert-success').text('Current Status: Present');
                            } else if (newStatus === "Absent") {
                                statusBox.addClass('alert-danger').text('Current Status: Absent');
                            } else {
                                statusBox.addClass('alert-info').text('Current Status: ' + newStatus);
                            }
                        } else {
                            console.error('Error updating status: ' + result.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error updating status:', error);
                    }
                });
            });
        });
        
        function loadDepartments() {
            $.get('/Departments/GetForDropdown')
                .done(function(data) {
                    var deptFilter = $('#departmentFilter');
                    
                    data.forEach(function(dept) {
                        deptFilter.append($('<option>', {
                            value: dept.departmentId,
                            text: dept.departmentName
                        }));
                    });
                })
                .fail(function(xhr, status, error) {
                    console.error('Error loading departments:', error);
                });
        }
        
        function loadEmployees() {
            $.get('/Employees/GetForDropdown')
                .done(function(data) {
                    var empFilter = $('#employeeFilter');
                    var quickEmp = $('#quickEmployee');
                    
                    data.forEach(function(emp) {
                        empFilter.append($('<option>', {
                            value: emp.employeeId,
                            text: emp.fullName
                        }));
                        
                        quickEmp.append($('<option>', {
                            value: emp.employeeId,
                            text: emp.fullName
                        }));
                    });
                })
                .fail(function(xhr, status, error) {
                    console.error('Error loading employees:', error);
                });
        }
        
        function checkCurrentStatus() {
            var employeeId = $('#quickEmployee').val();
            var date = $('#attendanceDate').val();

            var statusBox = $('#currentStatus');
            if (employeeId && date) {
                $.get('/Attendances/GetStatus', { employeeId: employeeId, date: date })
                    .done(function(data) {
                        statusBox.removeClass('alert-info alert-success alert-danger alert-warning');
                        if (data.status === "Present") {
                            statusBox.addClass('alert-success').text('Current Status: Present');
                        } else if (data.status === "Absent") {
                            statusBox.addClass('alert-danger').text('Current Status: Absent');
                        } else {
                            statusBox.addClass('alert-info').text('No attendance marked for this date');
                        }
                    })
                    .fail(function(xhr, status, error) {
                        statusBox.removeClass('alert-success alert-danger alert-info').addClass('alert-warning').text('Error checking status');
                    });
            } else {
                statusBox.removeClass('alert-success alert-danger alert-info alert-warning').addClass('alert-info').text('Please select both employee and date');
            }
        }
        

        
        function updateAttendanceTable() {
            // Get current filter values
            var deptId = $('#departmentFilter').val();
            var empId = $('#employeeFilter').val();
            var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();
            
            // Build query string
            var queryString = '?';
            if (deptId) queryString += 'deptId=' + deptId + '&';
            if (empId) queryString += 'empId=' + empId + '&';
            if (fromDate) queryString += 'from=' + fromDate + '&';
            if (toDate) queryString += 'to=' + toDate + '&';
            
            // Remove trailing '&' if exists
            if (queryString.endsWith('&')) {
                queryString = queryString.slice(0, -1);
            }
            
            // Load updated attendance data
            $.get('/Attendances/Index' + queryString)
                .done(function(data) {
                    // Extract the table body from the response
                    var tableBody = $(data).find('tbody').html();
                    $('#attendanceTable tbody').html(tableBody);
                })
                .fail(function(xhr, status, error) {
                    console.error('Error updating table:', error);
                });
        }

        function applyLiveFilter() {
            var deptId = $('#departmentFilter').val();
            var empId = $('#employeeFilter').val();
            var fromDate = $('#fromDate').val();
            var toDate = $('#toDate').val();
            
            console.log('Applying filter:', { deptId, empId, fromDate, toDate });
            
            // Build query string
            var queryString = '?';
            if (deptId) queryString += 'deptId=' + deptId + '&';
            if (empId) queryString += 'empId=' + empId + '&';
            if (fromDate) queryString += 'from=' + fromDate + '&';
            if (toDate) queryString += 'to=' + toDate + '&';
            
            // Remove trailing '&' if exists
            if (queryString.endsWith('&')) {
                queryString = queryString.slice(0, -1);
            }
            
            console.log('Query string:', queryString);
            
            // Load filtered data
            $.get('/Attendances/Index' + queryString)
                .done(function(data) {
                    console.log('Filter response received');
                    var tableBody = $(data).find('tbody').html();
                    $('#attendanceTable tbody').html(tableBody);
                })
                .fail(function(xhr, status, error) {
                    console.error('Error applying filter:', error);
                    console.error('Response:', xhr.responseText);
                });
        }
        
        // Calendar functionality
        var currentDate = new Date();
        var selectedDate = null;
        
        function initializeCalendar() {
            // Calendar button click
            $('#calendarBtn').click(function(e) {
                e.stopPropagation();
                toggleCalendar();
            });
            
            // Previous/Next month buttons
            $('#prevMonth').click(function() {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });
            
            $('#nextMonth').click(function() {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });
            
            // Close calendar when clicking outside
            $(document).click(function(e) {
                if (!$(e.target).closest('.calendar-widget, #calendarBtn').length) {
                    $('#calendarWidget').hide();
                }
            });
            
            // Initial render
            renderCalendar();
            
            // Debug: Test calendar functionality
            console.log('Calendar initialized');
        }
        
        function toggleCalendar() {
            var widget = $('#calendarWidget');
            if (widget.is(':visible')) {
                widget.hide();
            } else {
                // Position the calendar below the input
                var inputGroup = $('#attendanceDate').closest('.input-group');
                var offset = inputGroup.offset();
                widget.css({
                    position: 'absolute',
                    top: offset.top + inputGroup.outerHeight() + 5,
                    left: offset.left,
                    zIndex: 1000
                });
                widget.show();
                console.log('Calendar shown at:', offset.top + inputGroup.outerHeight() + 5, offset.left);
            }
        }
        
        function renderCalendar() {
            var year = currentDate.getFullYear();
            var month = currentDate.getMonth();
            
            // Update header
            var monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                             'July', 'August', 'September', 'October', 'November', 'December'];
            $('#currentMonth').text(monthNames[month] + ' ' + year);
            
            // Get first day of month and number of days
            var firstDay = new Date(year, month, 1);
            var lastDay = new Date(year, month + 1, 0);
            var startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            var calendarBody = $('#calendarBody');
            calendarBody.empty();
            
            // Add day headers
            var dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayNames.forEach(function(day) {
                calendarBody.append('<div class="calendar-day calendar-day-header">' + day + '</div>');
            });
            
            // Add calendar days
            var today = new Date();
            today.setHours(0, 0, 0, 0);
            
            for (var i = 0; i < 42; i++) {
                var date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                
                var dayElement = $('<div class="calendar-day"></div>');
                dayElement.text(date.getDate());
                
                // Check if it's the current month
                if (date.getMonth() !== month) {
                    dayElement.addClass('other-month');
                }
                
                // Check if it's today
                if (date.toDateString() === today.toDateString()) {
                    dayElement.addClass('today');
                }
                
                // Check if it's a future date
                if (date > today) {
                    dayElement.addClass('disabled');
                } else {
                    // Create a closure to capture the current date
                    (function(currentDate) {
                        dayElement.click(function() {
                            selectDate(currentDate);
                        });
                    })(new Date(date));
                }
                
                // Check if it's selected
                if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                    dayElement.addClass('selected');
                }
                
                calendarBody.append(dayElement);
            }
        }
        
        function selectDate(date) {
            selectedDate = new Date(date);
            var dateString = date.getFullYear() + '-' + 
                           String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                           String(date.getDate()).padStart(2, '0');
            
            $('#attendanceDate').val(dateString);
            $('#calendarWidget').hide();
            
            // Trigger change event to update status
            $('#attendanceDate').trigger('change');
        }
    </script>
}
